


let 저장=[]	//O,X 넣어줄 배열 생성
let 승리 = ''
let count = 0 //무승부 체크하기 위해 버튼 누른 횟수 변수 선언
 
 	//HTML에서 만든 버튼 클릭하면 실행될 함수 생성
    function 게임판만들기(){
       count = 0 // 게임 시작할때마다 횟수 리셋 필요
       let 게임판생성 = ''	// 버튼 누를때마다 게임판 생성 방지하기 위해 지역변수로 선언
       저장=[null,null,null,null,null,null,null,null,null]	// 승리판단 편의 위해 null값 버튼갯수만큼 9개 부여
       
       
      for(let i = 0 ; i <9 ; i++){//버튼 9개 생성 위한 반복문
         게임판생성 += `<button id=${i} onclick="버튼클릭(${i})">${i}</button>`//게임판생성 변수에 버튼 하나씩 계속 추가 해줌 +=
         			//게임판의 버튼을 누른 값을 나중에 사용하기 위한 id값 부여
         if(i%3==2){//3칸씩 띄어주기 위한 br태그 부여
            게임판생성 += `<br>`
         }
      }
      //HTML의 div 부분에 게임판생성변수 넣어주기 위해 문서객체로 가져옴
      document.getElementById('게임판').innerHTML = 게임판생성
   }

   
   //게임판의 버튼 클릭할때 마다 실행될 함수 생성
   function 버튼클릭(a){
      if(중복검사(a)){	//누른 버튼을 또 누를 경우 턴이 넘어가지 않게 하기 위한 함수
         alert('이미 둔 자리입니다.')
         return //잘못눌렀을시 밑에 부분들이 실행되지 않게 함수 종료  
      }
      count++ // 무승부 체크 위한 누른 횟수 카운드
      저장[a]='O'	//위에서 선언한 i를 매개변수로 가져왔음 따라서 여기서 a==i / '저장' 배열에 사용자가 누른 [i]인덱스에 O를 넣음
      document.getElementById(a).innerHTML = 'O'	//화면에 사용자가 누른 버튼 표시 바꿈
      
      if(승리판단()){//밑에서 선언한 승리판단 함수가 실행되고 true가 반환되면 실행
         alert('내가이김')   
         return
      }
      if(count==9){//카운트가 9면 실행되되록해서 무승부 결과 출력
         alert('무승부')
      }      
      
      let 난수= 0   // 컴퓨터 차례를 담기 위한 변수 선언   
      while(true){//안에 넣어준 조건문이 만족되서 break 걸릴때까지 무한실행
         난수 = Math.floor(Math.random()*9)	//변수에 난수발생시키는 함수 넣어줌
         if(저장[난수]==null){ //컴퓨터가 발생시킨 값이 배열에 없다면(아직 처음에 지정해준 null값일때)
         break//무한반복 종료
         }
      }
      count++	//카운트 증가
      저장[난수]='X'	//컴퓨터가 발생시킨 난수 자리에 X 넣어줌
      document.getElementById(난수).innerHTML = 'X' //화면에 버튼 모양 바꿔줌
      if(승리판단()){  //승리판단 함수 실행되고 true가 나오면
         alert('쟤가이김')  //컴퓨터 승리 선언하고 함수 종료
         return
      }
   }
      
   function 중복검사(i){ //중복검사 함수 선언
      if(저장[i]!=null){	//누른 버튼의 i값을 매개변수로 받아서 그 값의 인덱스 자리가 null이 아니라면
         return true //true값을 리턴시켜 다른 함수에서 이 true값을 이용해 함수를 사용할 수 있도록 함
      }      
   }

   
   // 승리조건을 넣어줄 함수 생성 // 각 조건에 맞으면 true값을 반환시켜 위에서 사용
   function 승리판단(){//가로 승리 조건 012 345 678 //세로 승리 조건 036 147 258 //대각선 승리 조건 048 246
   
      for(let i=0;i<=6;i+=3){
         if(저장[i]!=null&&저장[i]==저장[i+1] && 저장[i+1]==저장[i+2]){
            return true	//가로 승리 조건
         }
      }
      for(let i=0;i<=2;i++){
         if(저장[i]!=null&&저장[i]==저장[i+3]&&저장[i]==저장[i+6]){
            return true	//세로 승리 조건
         }
      }
      if(저장[0]!=null&&저장[4]!=null&&저장[8]!=null&&저장[0]==저장[4]&&저장[4]==저장[8]){
         return true	//대각선 048 승리조건
      }
      if(저장[2]!=null&&저장[2]==저장[4]&&저장[4]==저장[6]){
         return true	//대각선 246 승리조건
      }      
   }
   
   